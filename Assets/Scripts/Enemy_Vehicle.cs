using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;

public class Enemy_Vehicle : MonoBehaviour
{
    // Basic Vehicle Stats like health, speed, etc
    // Possible for future upgrades
    public float maxHealth = 20f;
    public float currentHealth { get; private set; }
    public float speed = 50f;
    public float damageResistance = 0.1f; 
    private FloatingHealthBar healthBar;
    public static Enemy_Vehicle enemy_Vehicle;

    [SerializeField] private ParticleSystem explosion;


    [SerializeField] private List<Transform> rearWheels;

    // Audio variables
    [SerializeField] private AudioSource audioSource;
    [SerializeField] private AudioClip collisionSound;
    [SerializeField] private float minCollisionForce = 2f;  // Minimum velocity to make sound
    [SerializeField] private float maxCollisionForce = 20f; // Velocity for maximum volume

    private void Awake()
    {
        healthBar = GetComponentInChildren<FloatingHealthBar>();

        
    
    }
    private void Start()
    {
        currentHealth = maxHealth;
        //starts the audio source
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }
    }

        // Add new collision sound method
    public void CollisionSound(float collisionIntensity)
    {
        if (audioSource != null && collisionSound != null)
        {
            float volume = Mathf.Clamp01(collisionIntensity);
            audioSource.PlayOneShot(collisionSound, volume);
        }
    }

    // Damage the vehicle, applying resistance modifier
    public void TakeDamage(float amount)
    {
        float damageAfterResistance = amount * (1 - damageResistance); //damage after resist
        currentHealth -= damageAfterResistance;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);
        healthBar.UpdateHealthBar(currentHealth, maxHealth);
        //Debug.Log($"Enemy Vehicle took {damageAfterResistance} damage. Health remaining: {currentHealth}");

        if (currentHealth <= 0) //destroy the vehicle if health is low enough
        {
            DestroyVehicle();
        }
    }

    private IEnumerator DestroyVehicleWithDelay()
    {
        Debug.Log("Vehicle destruction started.");
        explosion.transform.position = transform.position;
        explosion.Play();
        Debug.Log("Explosion triggered.");
        // Stop the car immediately
        Rigidbody rb = GetComponent<Rigidbody>();
        if (rb != null)
        {
            rb.velocity = Vector3.zero;
            rb.angularVelocity = Vector3.zero;
            rb.isKinematic = false;
            rb.useGravity = true; 
        }

        // Detach and destroy wheels
        for (int i = 0; i < rearWheels.Count; i++)
        {
            if (rearWheels[i] != null)
            {
                
                rearWheels[i].SetParent(null);

               
               


                Destroy(rearWheels[i].gameObject, 0.25f);
                Debug.Log($"Detached and marked wheel {rearWheels[i].name} for destruction.");
            }
        }

     
        MinionAI ai = GetComponent<MinionAI>();
        if (ai != null)
        {
            ai.TransitionToState(MinionAI.AIState.Destruction);
        }

        //explosion.Play();
        yield return new WaitForSeconds(3f);

        
        GameManager.Instance.RemoveEnemy(gameObject);

        // Finally destroy the vehicle
        Destroy(gameObject);
        Debug.Log("Vehicle destroyed completely.");
    }

    public void DestroyVehicle()
    {
        StartCoroutine(DestroyVehicleWithDelay());
    }



    // Health regeneration feature
    public void RegenerateHealth(float regenAmount)
    {
        currentHealth += regenAmount;
        currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);
        healthBar.UpdateHealthBar(currentHealth, maxHealth);
        Debug.Log($"Health regenerated by {regenAmount}. Current health: {currentHealth}");
    }

    // Destroy the vehicle if zero health
    //private void DestroyVehicle()
    //{
      //  Debug.Log("Vehicle destroyed!");
        // Implement destruction effects (explosions, disable controls, etc.)
        //GameManager.Instance.RemoveEnemy(transform.gameObject);
      //  Destroy(gameObject);

    //}
    public void OnCollisionEnter(Collision collision){
        // Get the collision velocity magnitude
        float collisionForce = collision.relativeVelocity.magnitude;
        
        // Only play sound if collision force is above min force and its not player since player will also play sounds
        
        float collisionDamage=1f;
        if((collision.transform.root.gameObject.tag=="Player") || (collision.transform.root.gameObject.tag=="Enemy")){

            float impactSpeed=collision.gameObject.GetComponent<VelocityReporter>().velocity.magnitude; //translate the velocity to magnitude
            //Debug.Log($"The magnitude of enemy is {impactSpeed}.");
            collisionDamage=impactSpeed*Vehicle_Status.vehicle_Status.damage; //then apply the collision damage
            TakeDamage(collisionDamage);
        }else{
            if (collisionForce >= minCollisionForce)
            {
                // Calculate volume based on collision force
                float normalizedForce = (collisionForce - minCollisionForce) / (maxCollisionForce - minCollisionForce);
                float volume = Mathf.Clamp01(normalizedForce); // Clamp between 0 and 1
                
                // Call collision sound with calculated volume
                CollisionSound(volume);
                
                Debug.Log($"Collision Force: {collisionForce}, Volume: {volume}");
            }
        }
        // If slams into environment, take damage (removed for now due to self killing)
    }
}
